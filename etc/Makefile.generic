#  Generic definitions, override them to implement any specific behavior.
#
# IMPORTANT
#   If you introduce a new recipe, make sure to only specify the particular
#   `actions` that you need to take, and define the action elsewhere. For
#   example, to remove a file/folder, define _remove_ and then define remove
#   in Makefile.config as rm -rf. This way, you can override them later in
#   your platform config file. Remember, you can override variables, but
#   overriding full recipes is discouraged (but specialization of pattern
#   rules is allowed).
#


# A macro to make sure that if what we fetch is incomplete, we dont continue
# if interrrupted without retriving it completely.

define fetch_x
	$(wget) $(1)/$(2) && $(move) $(2) $(3)
endef

# A pattern to fetch any thing from our sourceurl.
fetched/%: | fetched
	$(call fetch_x,$(sourceurl),$*,$(@D))

# To ensure that a project is checked out in source/,
# we need to extract the fetched targz to the correct directory. This is a
# pattern rule, so provide the full path to source/*/._.checkout to override
# it for specific projects that have different source urls or compression
# mechanisms.
source/%/._.checkout: fetched/%.$(tgz) | source/%
	$(extractgz) $< source/
	$(touch) $@

# We have a few patches now. so
source/%/._.patch: source/%/._.checkout
	$(patchall) $* $(@D)
	$(touch) $@

# we cant predict the options to be passed to config, so we only have
# a skeletal rule here. Override them for specific projects.
build/$(arch)/%/._.config: source/%/._.patch | build/$(arch)/%
	$(touch) $@

# In general make should be just make
build/$(arch)/%/._.make: build/$(arch)/%/._.config
	(cd $(@D) && $(MAKE) ) $(t) $@.log
	$(touch) $@

clean-%:
	- (cd build/$(arch)/$*/ && $(MAKE) clean ) $(t) $@.log
	- $(remove) \
		build/$(arch)/$*/._.config \
		build/$(arch)/$*/._.make \
		install/$(arch)/$*/._.install

clobber-%:
	$(remove) build/$(arch)/$* source/$*

build-%: build/$(arch)/%/._.make
	@$(echo) $@ done

install-%: install/$(arch)/%/._.install
	@$(echo) $@ done

# And make install should work.
install/$(arch)/%/._.install: build/$(arch)/%/._.make | install/$(arch)/%
	(cd $(<D) && $(MAKE) install ) $(t) $@.log
	$(touch) $@

# If we want the source under build, then use this as a dependency
build/$(arch)/%/._.sync:  source/%/._.patch | build/$(arch)/%
	$(syncdir) $(<D) $(@D)
	$(touch) $@

# GMake does not honor dependency lines with pattern (%) in them
# unless it is a make recipe. So we are stuck with having to create
# them for each individual project using a macro hack.
define standard_x
fetched/$(1).tar.gz: | fetched
source/$(1)/._.checkout: | source/$(1)
build/$(arch)/$(1)/._.config: | build/$(arch)/$(1)
build/$(arch)/$(1)/._.make: | build/$(arch)/$(1)
install/$(arch)/$(1)/._.install: | install/$(arch)/$(1)
endef

